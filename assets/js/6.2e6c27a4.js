(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{273:function(a,e,s){a.exports=s.p+"assets/img/Promises_diagram.25012882.svg"},274:function(a,e,s){a.exports=s.p+"assets/img/Promises_code.db075ff1.png"},288:function(a,e,s){"use strict";s.r(e);var o=s(14),r=Object(o.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[e("RouterLink",{attrs:{to:"/docs/"}},[a._v("< Voltar")])],1),a._v(" "),e("h2",{attrs:{id:"promise-based-async"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-based-async"}},[a._v("#")]),a._v(" Promise based async")]),a._v(" "),e("h3",{attrs:{id:"problema"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#problema"}},[a._v("#")]),a._v(" Problema")]),a._v(" "),e("p",[a._v("O JavaScript é uma linguagem de somente uma "),e("em",[a._v("thread")]),a._v(". Isso significa que todas as operações são executadas em um único laço, que chamamos de Laço de Eventos (Event Loop). Enquanto isso facilita o entendimento do código, pois cada operação será executada até o fim sem impedimentos, isso também pode gerar alguns problemas quando precisamos executar operações que dependem de respostas de APIs. Por exemplo, quando vamos executar um fetch, o JS chama algumas funções do navegador, que por sua vez devem executar e adicionar uma nova operação ao laço para que o JS colha os dados.")]),a._v(" "),e("h3",{attrs:{id:"exemplo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exemplo"}},[a._v("#")]),a._v(" Exemplo")]),a._v(" "),e("p",[a._v("Você está criando um programa que usará três APIs. Essas APIs retornarão dados necessários para apresentar uma tela para seu usuário. Porém, enquanto o usuário espera essas chamadas serem completas, gostaríamos que ele visse uma animação acontecendo na tela, que é controlada também pelo JavaScript. Além disso, gostaríamos de ter um botão na tela que o usuário pudesse cancelar essas chamadas. Contudo, ao começarmos as chamadas as APIs, a animação trava e o botão se torna irresponsivo.")]),a._v(" "),e("h3",{attrs:{id:"contexto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#contexto"}},[a._v("#")]),a._v(" Contexto")]),a._v(" "),e("ul",[e("li",[a._v("Estamos executando processos que demoram um tempo indeterminado")]),a._v(" "),e("li",[a._v("Os processos que estamos executando dependem de APIs terceiras, não controladas pelo nosso programa")]),a._v(" "),e("li",[a._v("O laço de eventos do JavaScript não pode parar para esperar esses processos")])]),a._v(" "),e("h3",{attrs:{id:"solucao"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solucao"}},[a._v("#")]),a._v(" Solução")]),a._v(" "),e("p",[a._v("A solução implementada pelo JavaScript é permitir que tarefas sejam agendadas para serem executadas somente quando algum processo terceiro responder. Dessa forma, podemos conferir se uma tarefa esta pronta para ser processada e só executá-la no momento certo, não impedindo outras tarefas no processo. A prioridade do laço de eventos, no Javascript, é sempre manter a tela do usuário atualizada, processando mudanças no HTML e no CSS a todo momento. Só depois de garantir os processos que envolvem a tela que ele processa tarefas secundárias que foram envolvidas em Promises.")]),a._v(" "),e("p",[a._v("A expressão linguística Promise que é implementada pelo JS para permitir a assincronia, disponibiliza uma interface padrão para atrasarmos a execução de tarefas. A partir do ES 2017, podemos simplificar o uso de Promises com as palavras reservadas async e await.")]),a._v(" "),e("h3",{attrs:{id:"diagrama"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diagrama"}},[a._v("#")]),a._v(" Diagrama")]),a._v(" "),e("img",{attrs:{src:s(273),width:"700px"}}),a._v(" "),e("p",[e("strong",[a._v("Fonte")]),a._v(": https://subhra.hashnode.dev/all-about-javascript-event-loop")]),a._v(" "),e("h3",{attrs:{id:"implementacao"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementacao"}},[a._v("#")]),a._v(" Implementação")]),a._v(" "),e("p"),a._v(" "),e("img",{attrs:{src:s(274)}})])}),[],!1,null,null,null);e.default=r.exports}}]);