(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{295:function(a,e,o){"use strict";o.r(e);var s=o(14),r=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[e("RouterLink",{attrs:{to:"/docs/"}},[a._v("< Voltar")])],1),a._v(" "),e("h2",{attrs:{id:"singleton"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#singleton"}},[a._v("#")]),a._v(" Singleton")]),a._v(" "),e("h3",{attrs:{id:"problema"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#problema"}},[a._v("#")]),a._v(" Problema")]),a._v(" "),e("p",[a._v("É comum que, ao implementar front-ends, algumas funcionalidades precisem ser acessadas de diversos lugares. Temos diversas maneiras de compartilhar lógica entre componentes mas algumas vezes é necessário que estabeleçamos um controle especial sobre como cada componente vai acessar aquela funcionalidade. Além disso, alguns recursos só podem ser acessados uma vez, como arquivos e conexões perenes com APIs.")]),a._v(" "),e("h3",{attrs:{id:"exemplo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exemplo"}},[a._v("#")]),a._v(" Exemplo")]),a._v(" "),e("p",[a._v("Imaginemos que você possui um front-end complexo que é utilizado por vários usuários. Porém, a equipe de produto da sua empresa quer que você produza dados sobre a utilização de algumas funcionalidades, para controlar quais funcionalidades devem ser evoluídas ou descartadas. Para gerar e armazenar essas métricas, você usa um provedor externo que distribui uma biblioteca cliente que precisa conectar com o servidor de métricas. Esta conexão precisa continuar ativa durante todo o funcionamento da aplicação pois criá-la é demorado e custoso para a aplicação.")]),a._v(" "),e("h3",{attrs:{id:"contexto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#contexto"}},[a._v("#")]),a._v(" Contexto")]),a._v(" "),e("ul",[e("li",[a._v("Temos um recurso único dentro da aplicação, como uma conexão com banco de dados ou uma conexão perene com uma API")]),a._v(" "),e("li",[a._v("A funcionalidade precisa ser acessível a várias partes do sistema")]),a._v(" "),e("li",[a._v("A inicialização do objeto que gerencia o recurso é custosa")])]),a._v(" "),e("h3",{attrs:{id:"solucao"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solucao"}},[a._v("#")]),a._v(" Solução")]),a._v(" "),e("p",[a._v("O padrão Singleton possibilita limitar a quantidade de instâncias de uma classe, para uma ou mais instâncias, dependendo da necessidade. Esse controle permite um contrato especializado para lidarmos com um recurso ou simplesmente para disponibilizar a funcionalidade com estado para todo o sistema. Para criarmos esta instância, podemos colocar essa inicialização no começo do ciclo de vida do front-end ou inicializarmos somente quando for necessário o uso da funcionalidade.")]),a._v(" "),e("p",[a._v("O Singleton pode ser considerado um padrão controverso. Se utilizado com muita frequência, ele pode dificultar a manutenção do sistema, pois cada Singleton é uma variável global com estado exposto a todos os componentes.")]),a._v(" "),e("h3",{attrs:{id:"diagrama"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diagrama"}},[a._v("#")]),a._v(" Diagrama")]),a._v(" "),e("h3",{attrs:{id:"implementacao"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementacao"}},[a._v("#")]),a._v(" Implementação")])])}),[],!1,null,null,null);e.default=r.exports}}]);